{
    "version": 1,
    // Interval of checking and pushing
    // Valid formats: 1m 1h 1d
    // Default: 1m
    // Values less than 1m will be ignored
    "interval": "1m",
    // Check rules
    //
    // Type: 
    // cpu, mem, net, disk, temp (temperature), swap
    //
    // Threshold:
    // format: COMPARE_OPERATOR VALUE UNIT
    // COMPARE_OPERATOR: >, >=, <, <=, =
    // VALUE: int/float: 0.1 1 1.1
    // UNIT: % (percent), m/s (speed), m (size), c (celsius)
    // Speed only valid in per second: b/s k/s, m/s, g/s ...
    // 
    // Matcher:
    // cpu: cpu, cpu0, 1, 2, 3, ...
    // mem: free, used, avail
    // net: eth0, eth1-in, docker-out, ...
    // disk: /, /home, /dev/sda1, ...
    // temp: x86_pkg_temp, x86_core_temp, ...
    // swap: free, used
    "rules": [
        {
            "type": "cpu",
            "threshold": ">=77.7%",
            // "" / "cpu" -> all cpus, in this case, you can omit attribute "matcher"
            // "X" / "cpuX" -> NO.X cpu
            "matcher": "0"
        },
        {
            "type": "net",
            // speed only support per second
            "threshold": ">=7.7m/s",
            // network interface name
            "matcher": "eth0"
        },
        {
            "type": "temp",
            // temperature only support celsius
            "threshold": ">=37.7c",
            // you can run `cat /sys/class/thermal/thermal_zone*/type` to get all thermal types
            "matcher": "x86_pkg_temp"
        },
        {
            "type": "disk",
            "threshold": ">=77.7%",
            // mount point or filesystem
            // you can use `df -h` to get all valid matchers
            "matcher": "/dev/sda1"
        },
        {
            "type": "mem",
            // support: size, percent
            "threshold": "<=17.7%",
            // support: free, used, avail
            "matcher": "free"
        },
        {
            "type": "swap",
            // support: size, percent
            "threshold": ">=37.7%",
            // support: free, used
            "matcher": "used"
        }
    ],
    // Push rules
    //
    // type: webhook, ios (more to come)
    // iface: interface for the push type
    // success_body_regex: regex to match the response body
    // success_code: response code to match
    "pushes": [
        {
            // This is a example for QQ Group message
            "type": "webhook",
            "iface": {
                "name": "QQ Group",
                // Webhook url
                "url": "http://localhost:5700",
                // Headers for the request
                "headers": {
                    "Authorization": "Bearer YOUR_TOKEN",
                    "Content-Type": "application/json"
                },
                // UPPERCASED HTTP method
                "method": "POST",
                // Body for the request
                // {{key}} and {{value}} will be replaced with the key and value of the check result
                "body": {
                    "action": "send_group_msg",
                    "params": {
                        "group_id": 123456789,
                        "message": "ServerBox Notification\n{{key}}: {{value}}"
                    }
                }
            },
            // Regex to match the response body
            // If the response body matches the regex, the push is considered successful
            "body_regex": ".*",
            // If the response code equals, the push is considered successful
            "code": 200
        },
        {
            "type": "ios",
            "iface": {
                "name": "ServerBox iOS App",
                // You can get it from settings page of ServerBox iOS app
                "token": "YOUR_TOKEN",
                // {{key}} and {{value}} will be replaced with the key and value of the check
                "title": "Server Notification",
                // {{key}} and {{value}} will be replaced with the key and value of the check
                "content": "{{key}}: {{value}}"
            },
            // Regex to match the response body
            // If the response body matches the regex, the push is considered successful
            "body_regex": ".*",
            // If the response code equals, the push is considered successful
            "code": 200
        },
        {
            "type": "server_chan",
            "iface": {
                "name": "ServerChan",
                // Details please refer to https://sct.ftqq.com/
                "sckey": "YOUR_SCKEY",
                "title": "Server Notification",
                "desp": "{{key}}: {{value}}"
            },
            "body_regex": ".*",
            "code": 200
        }
    ]
}